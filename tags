!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
TestConvertToNumber	application_test.go	/^func TestConvertToNumber(t *testing.T) {$/;"	f
TestConvertToRoman	application_test.go	/^func TestConvertToRoman(t *testing.T) {$/;"	f
TestFromChar	symbol_test.go	/^func TestFromChar(t *testing.T) {$/;"	f
TestMixin	symbol_test.go	/^func TestMixin(t *testing.T) {$/;"	f
combine	romanSymbol.go	/^func combine(first romanSymbol, second romanSymbol) romanSymbol {$/;"	f
convertToNumeric	conversions.go	/^func convertToNumeric(symbols string) (int, error) {$/;"	f
convertToRoman	conversions.go	/^func convertToRoman(input int) string {$/;"	f
decompose	romanSymbol.go	/^func decompose(i int) (leading int, power int) {$/;"	f
defaultRomanDictionary	romanSymbol.go	/^func defaultRomanDictionary() romanDictionary {$/;"	f
equals	romanSymbol.go	/^func (r romanSymbol) equals(other romanSymbol) bool {$/;"	f
fromChar	romanSymbol.go	/^func fromChar(s string, dict romanDictionary) (romanSymbol, error) {$/;"	f
fromValue	romanSymbol.go	/^func fromValue(k int, dict romanDictionary) (romanSymbol, error) {$/;"	f
mixinRomanDictionary	romanSymbol.go	/^func mixinRomanDictionary() romanDictionary {$/;"	f
roman	application_test.go	/^package roman$/;"	p
roman	conversions.go	/^package roman$/;"	p
roman	romanSymbol.go	/^package roman$/;"	p
roman	symbol_test.go	/^package roman$/;"	p
romanDict	romanSymbol.go	/^	romanThousand    = romanSymbol{1000, "M"}$/;"	v
romanDictionary	romanSymbol.go	/^type romanDictionary []romanSymbol$/;"	t
romanFifty	romanSymbol.go	/^	romanTen         = romanSymbol{10, "X"}$/;"	v
romanFive	romanSymbol.go	/^	romanOne         = romanSymbol{1, "I"}$/;"	v
romanFiveHundred	romanSymbol.go	/^	romanHundred     = romanSymbol{100, "C"}$/;"	v
romanHundred	romanSymbol.go	/^	romanFifty       = romanSymbol{50, "L"}$/;"	v
romanOne	romanSymbol.go	/^var ($/;"	v
romanSymbol	romanSymbol.go	/^type romanSymbol struct {$/;"	t
romanTen	romanSymbol.go	/^	romanFive        = romanSymbol{5, "V"}$/;"	v
romanThousand	romanSymbol.go	/^	romanFiveHundred = romanSymbol{500, "D"}$/;"	v
